// Generated by view binder compiler. Do not edit!
package com.example.rickandmorty.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.rickandmorty.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ViewErrorBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView connectionError;

  @NonNull
  public final TextView connectionErrorDescription;

  @NonNull
  public final TextView tryAgain;

  @NonNull
  public final ImageView veIcon;

  private ViewErrorBinding(@NonNull LinearLayout rootView, @NonNull TextView connectionError,
      @NonNull TextView connectionErrorDescription, @NonNull TextView tryAgain,
      @NonNull ImageView veIcon) {
    this.rootView = rootView;
    this.connectionError = connectionError;
    this.connectionErrorDescription = connectionErrorDescription;
    this.tryAgain = tryAgain;
    this.veIcon = veIcon;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewErrorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewErrorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_error, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewErrorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.connectionError;
      TextView connectionError = ViewBindings.findChildViewById(rootView, id);
      if (connectionError == null) {
        break missingId;
      }

      id = R.id.connectionErrorDescription;
      TextView connectionErrorDescription = ViewBindings.findChildViewById(rootView, id);
      if (connectionErrorDescription == null) {
        break missingId;
      }

      id = R.id.tryAgain;
      TextView tryAgain = ViewBindings.findChildViewById(rootView, id);
      if (tryAgain == null) {
        break missingId;
      }

      id = R.id.ve_icon;
      ImageView veIcon = ViewBindings.findChildViewById(rootView, id);
      if (veIcon == null) {
        break missingId;
      }

      return new ViewErrorBinding((LinearLayout) rootView, connectionError,
          connectionErrorDescription, tryAgain, veIcon);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
