// Generated by Dagger (https://dagger.dev).
package com.example.rickandmorty.data.characters.mappers;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CharacterMapper_Factory implements Factory<CharacterMapper> {
  private final Provider<GenderMapper> genderMapperProvider;

  private final Provider<OriginMapper> originMapperProvider;

  private final Provider<LocationMapper> locationMapperProvider;

  private final Provider<StatusMapper> statusMapperProvider;

  public CharacterMapper_Factory(Provider<GenderMapper> genderMapperProvider,
      Provider<OriginMapper> originMapperProvider, Provider<LocationMapper> locationMapperProvider,
      Provider<StatusMapper> statusMapperProvider) {
    this.genderMapperProvider = genderMapperProvider;
    this.originMapperProvider = originMapperProvider;
    this.locationMapperProvider = locationMapperProvider;
    this.statusMapperProvider = statusMapperProvider;
  }

  @Override
  public CharacterMapper get() {
    return newInstance(genderMapperProvider.get(), originMapperProvider.get(), locationMapperProvider.get(), statusMapperProvider.get());
  }

  public static CharacterMapper_Factory create(Provider<GenderMapper> genderMapperProvider,
      Provider<OriginMapper> originMapperProvider, Provider<LocationMapper> locationMapperProvider,
      Provider<StatusMapper> statusMapperProvider) {
    return new CharacterMapper_Factory(genderMapperProvider, originMapperProvider, locationMapperProvider, statusMapperProvider);
  }

  public static CharacterMapper newInstance(GenderMapper genderMapper, OriginMapper originMapper,
      LocationMapper locationMapper, StatusMapper statusMapper) {
    return new CharacterMapper(genderMapper, originMapper, locationMapper, statusMapper);
  }
}
