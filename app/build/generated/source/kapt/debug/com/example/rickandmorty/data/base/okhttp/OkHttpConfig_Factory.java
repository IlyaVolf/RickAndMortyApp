// Generated by Dagger (https://dagger.dev).
package com.example.rickandmorty.data.base.okhttp;

import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OkHttpConfig_Factory implements Factory<OkHttpConfig> {
  private final Provider<String> baseUrlProvider;

  private final Provider<OkHttpClient> clientProvider;

  private final Provider<Gson> gsonProvider;

  public OkHttpConfig_Factory(Provider<String> baseUrlProvider,
      Provider<OkHttpClient> clientProvider, Provider<Gson> gsonProvider) {
    this.baseUrlProvider = baseUrlProvider;
    this.clientProvider = clientProvider;
    this.gsonProvider = gsonProvider;
  }

  @Override
  public OkHttpConfig get() {
    return newInstance(baseUrlProvider.get(), clientProvider.get(), gsonProvider.get());
  }

  public static OkHttpConfig_Factory create(Provider<String> baseUrlProvider,
      Provider<OkHttpClient> clientProvider, Provider<Gson> gsonProvider) {
    return new OkHttpConfig_Factory(baseUrlProvider, clientProvider, gsonProvider);
  }

  public static OkHttpConfig newInstance(String baseUrl, OkHttpClient client, Gson gson) {
    return new OkHttpConfig(baseUrl, client, gson);
  }
}
