// Generated by Dagger (https://dagger.dev).
package com.example.rickandmorty.presentation.characters;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CharacterDetailedFragment_MembersInjector implements MembersInjector<CharacterDetailedFragment> {
  private final Provider<CharacterDetailedViewModel.Factory> factoryProvider;

  public CharacterDetailedFragment_MembersInjector(
      Provider<CharacterDetailedViewModel.Factory> factoryProvider) {
    this.factoryProvider = factoryProvider;
  }

  public static MembersInjector<CharacterDetailedFragment> create(
      Provider<CharacterDetailedViewModel.Factory> factoryProvider) {
    return new CharacterDetailedFragment_MembersInjector(factoryProvider);
  }

  @Override
  public void injectMembers(CharacterDetailedFragment instance) {
    injectFactory(instance, factoryProvider.get());
  }

  @InjectedFieldSignature("com.example.rickandmorty.presentation.characters.CharacterDetailedFragment.factory")
  public static void injectFactory(CharacterDetailedFragment instance,
      CharacterDetailedViewModel.Factory factory) {
    instance.factory = factory;
  }
}
